name: Build and Upload Release Assets

on:
  release:
    types: [created]

env:
  BINARY_NAME: mc

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -a -installsuffix cgo -ldflags="-w -s -X main.Version=${{ steps.get_version.outputs.version }}" -o ${{ env.BINARY_NAME }}-${{ matrix.suffix }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          path: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}

  upload-assets:
    needs: build-and-upload
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find ./artifacts -type f -name "${{ env.BINARY_NAME }}-*" -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Generate checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          ls -la

      - name: Upload assets to existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all binaries and checksums to the existing release
          gh release upload ${{ github.event.release.tag_name }} ./release/* --clobber

      - name: Update release notes with checksums
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current release notes
          CURRENT_NOTES=$(gh release view ${{ github.event.release.tag_name }} --json body --jq '.body')
          
          # Append installation instructions and checksums if not already present
          if ! echo "$CURRENT_NOTES" | grep -q "### Installation"; then
            cat > additional_notes.md << 'EOF'
          
          ### Installation
          
          **Linux/macOS (one-liner):**
          ```bash
          curl -sfL https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-linux-amd64 -o mc && chmod +x mc && sudo mv mc /usr/local/bin/
          ```
          
          **Windows (PowerShell):**
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-windows-amd64.exe" -OutFile "mc.exe"
          ```
          
          ### Manual Downloads
          - **Linux (x64):** [mc-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-linux-amd64)
          - **Windows (x64):** [mc-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-windows-amd64.exe)
          - **macOS (Intel):** [mc-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-darwin-amd64)
          - **macOS (Apple Silicon):** [mc-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/mc-darwin-arm64)
          
          ## Checksums (SHA256)
          ```
          $(cat release/checksums.txt)
          ```
          EOF
          
            # Combine current notes with additional notes
            echo "$CURRENT_NOTES" > combined_notes.md
            cat additional_notes.md >> combined_notes.md
          
            # Update the release with the combined notes
            gh release edit ${{ github.event.release.tag_name }} --notes-file combined_notes.md
          fi
